ARG DEEPSTREAM_VERSION
FROM nvcr.io/nvidia/deepstream:$DEEPSTREAM_VERSION-devel AS base_builder

# Newer cmake ver. needed for "FindCUDAToolkit"
RUN mkdir -p /tmp/cmake \
    && cd /tmp/cmake \
    && wget --progress=bar:force:noscroll https://github.com/Kitware/CMake/releases/download/v3.23.2/cmake-3.23.2-linux-x86_64.sh \
    && sh cmake-3.23.2-linux-x86_64.sh --skip-license --prefix=/usr/local/

# need python headers
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
    python3-dev

# python to python3 by default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10


FROM base_builder AS pygstsavantframemeta_build

WORKDIR /libs/gstsavantframemeta
COPY libs/gstsavantframemeta/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY libs/gstsavantframemeta .
RUN python setup.py bdist_wheel && \
    rm -rf _skbuild


FROM base_builder AS savantboost_build

WORKDIR /libs/savanboost
COPY libs/savantboost/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY libs/savantboost .
RUN python setup.py bdist_wheel && rm -rf _skbuild


FROM base_builder AS opencv_build

WORKDIR /opencv
ARG OPENCV_VERSION=4.6.0
RUN git clone --branch "${OPENCV_VERSION}" --depth 1 https://github.com/opencv/opencv
RUN git clone --branch "${OPENCV_VERSION}" --depth 1 https://github.com/opencv/opencv_contrib
WORKDIR /opencv/build

RUN python -m pip install --no-cache-dir 'numpy~=1.22.4'

COPY libs/opencv/savant /opencv/opencv_contrib/modules/savant
RUN --mount=type=cache,target=/tmp/opencv-cache \
    cmake \
        -D CMAKE_BUILD_TYPE=RELEASE \
        -D OPENCV_EXTRA_MODULES_PATH=/opencv/opencv_contrib/modules  \
        -D CMAKE_INSTALL_PREFIX=/opencv/dist  \
        -D OPENCV_DOWNLOAD_PATH=/tmp/opencv-cache \
        -D PYTHON_DEFAULT_EXECUTABLE=$(which python3) \
        -D OPENCV_PYTHON_INSTALL_PATH=lib/python3.8/dist-packages \
        -D OPENCV_FORCE_PYTHON_LIBS=ON \
        -D BUILD_LIST=core,cudaarithm,cudabgsegm,cudacodec,cudafeatures2d,cudafilters,cudaimgproc,cudev,features2d,flann,imgcodecs,savant,python3 \
        -D BUILD_opencv_apps=OFF \
        -D BUILD_DOCS=OFF \
        -D BUILD_EXAMPLES=OFF \
        -D BUILD_JAVA=OFF \
        -D BUILD_PERF_TESTS=OFF \
        -D BUILD_SHARED_LIBS=ON \
        -D WITH_CUDA=ON \
        -D WITH_FFMPEG=OFF \
        -D WITH_GSTREAMER=OFF \
        /opencv/opencv

RUN make -j$(nproc) install


FROM nvcr.io/nvidia/deepstream:$DEEPSTREAM_VERSION-base AS base

# python to python3 by default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10

# install base packages
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
    python3-pip \
    python3-dev \
    libcairo2-dev \
    libgirepository1.0-dev \
    python3-gst-1.0 \
    gstreamer1.0-python3-plugin-loader \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

COPY --from=opencv_build /opencv/dist /usr/local

ENV PYTHONUNBUFFERED=1
ARG APP_PATH=/opt/app
ENV APP_PATH=$APP_PATH
ENV PYTHONPATH=$APP_PATH
WORKDIR $APP_PATH

# add deepstream libs to path, so that ctypes can load them
ENV LD_LIBRARY_PATH=/opt/nvidia/deepstream/deepstream/lib/:$LD_LIBRARY_PATH

# install requirements
COPY requirements/base.txt requirements-base.txt
COPY requirements/deepstream.txt requirements-deepstream.txt
RUN python -m pip install --no-cache-dir --upgrade pip
RUN python -m pip install --no-cache-dir \
    -r requirements-base.txt \
    -r requirements-deepstream.txt \
    && rm requirements-base.txt \
    && rm requirements-deepstream.txt

COPY --from=pygstsavantframemeta_build /libs/gstsavantframemeta/dist /libs/gstsavantframemeta/dist
RUN python -m pip install --no-cache-dir /libs/gstsavantframemeta/dist/*.whl

COPY --from=savantboost_build /libs/savanboost/dist /libs/savanboost/dist
RUN python -m pip install --no-cache-dir /libs/savanboost/dist/*.whl

COPY savant savant
COPY LICENSE savant/
ENV GST_PLUGIN_PATH=$APP_PATH/savant/gst_plugins:$APP_PATH/savant/utils/gst_plugins

ENTRYPOINT ["python", "-m", "savant.entrypoint"]


FROM base as samples
COPY requirements/samples.txt requirements-samples.txt
RUN python -m pip install --no-cache-dir \
    -r requirements-samples.txt \
    && rm requirements-samples.txt
COPY samples samples

FROM base AS adapters

COPY adapters/ds adapters/ds
COPY adapters/gst/gst_plugins/python/adjust_timestamps.py \
     adapters/gst/gst_plugins/python/fps_meter.py \
     adapters/gst/gst_plugins/python/
ENV GST_PLUGIN_PATH=$GST_PLUGIN_PATH:$APP_PATH/adapters/gst/gst_plugins:$APP_PATH/adapters/ds/gst_plugins

ENTRYPOINT []


FROM samples as docs

RUN apt update && apt install --no-install-recommends -y \
    graphviz && \
    apt autoremove -y && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*

COPY docs/requirements.txt requirements-docs.txt
RUN python -m pip install --no-cache-dir \
    -r requirements-docs.txt \
    && rm requirements-docs.txt

ARG USERNAME=container_user
# UID should be set to the same value as host OS UID
ARG USER_UID=1001
ARG USER_GID=$USER_UID
# Create the user
RUN groupadd --gid $USER_GID $USERNAME \
	&& useradd --uid $USER_UID --gid $USER_GID -m $USERNAME

RUN chown -R $USER_UID:$USER_GID $APP_PATH
USER $USERNAME

WORKDIR $APP_PATH/docs

ENTRYPOINT ["make"]
CMD ["clean", "html"]
