ARG DEEPSTREAM_VERSION
ARG DEEPSTREAM_DEVEL_IMAGE=$DEEPSTREAM_VERSION-triton-multiarch
ARG DEEPSTREAM_BASE_IMAGE=$DEEPSTREAM_VERSION-samples-multiarch
FROM nvcr.io/nvidia/deepstream:$DEEPSTREAM_DEVEL_IMAGE AS base_builder
ARG TARGETARCH
ARG PYTHON_VERSION=3.10

# python to python3 by default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10

# update pip
RUN python -m pip install --no-cache-dir --upgrade pip

# install cmake
ARG CMAKE_VER=3.27.7
RUN if [ "$TARGETARCH" = "amd64" ]; then \
      wget -nv -O /tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v$CMAKE_VER/cmake-$CMAKE_VER-linux-x86_64.sh; \
      sh /tmp/cmake.sh --skip-license --prefix=/usr/local; \
      rm -f /tmp/cmake.sh; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
      wget -nv -O /tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v$CMAKE_VER/cmake-$CMAKE_VER-linux-aarch64.sh; \
      sh /tmp/cmake.sh --skip-license --prefix=/usr/local; \
      rm -f /tmp/cmake.sh; \
    fi


# Savant python package builder
FROM base_builder as savant_build

RUN apt-get update && \
    apt-get install --no-install-recommends -y \
      python${PYTHON_VERSION}-venv

RUN python -m pip install --no-cache-dir setuptools wheel build

WORKDIR /tmp/build
COPY pyproject.toml README.md LICENSE ./
COPY requirements/base.txt requirements/base.txt
COPY requirements/savant-rs.txt requirements/savant-rs.txt
COPY savant savant
RUN python -m build --wheel


# Savant GStreamer/DeepStream meta package builder
FROM base_builder AS pygstsavantframemeta_build

WORKDIR /libs/gstsavantframemeta
COPY libs/gstsavantframemeta/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY requirements/savant-rs.txt requirements-savant-rs.txt
RUN pip install --no-cache-dir -r requirements-savant-rs.txt

COPY libs/gstsavantframemeta .
RUN python setup.py bdist_wheel && rm -rf _skbuild


# Savant boost(cuda) library builder
FROM base_builder AS savantboost_build
# TODO: Determine JetPack release (replace `r36.2`)
RUN if [ "$TARGETARCH" = "arm64" ]; then \
      echo "deb [trusted=yes] https://repo.download.nvidia.com/jetson/t234 r36.2 main" \
        > /etc/apt/sources.list.d/nvidia-l4t-apt-source.list; \
      rm /etc/ld.so.conf.d/nvidia-tegra.conf; \
      mkdir -p /opt/nvidia/l4t-packages/; \
      touch /opt/nvidia/l4t-packages/.nv-l4t-disable-boot-fw-update-in-preinstall; \
      apt-get update; \
      apt-get install --no-install-recommends -y nvidia-l4t-multimedia; \
    fi

WORKDIR /libs/savanboost
COPY libs/savantboost/requirements.txt .
RUN python -m pip install --no-cache-dir -r requirements.txt

COPY libs/savantboost .
RUN python setup.py bdist_wheel -- -DCMAKE_BUILD_TYPE:STRING=Release  && rm -rf _skbuild

# Savant amd64 base container
FROM nvcr.io/nvidia/deepstream:$DEEPSTREAM_BASE_IMAGE AS base_amd64


# Savant arm64 base container
FROM nvcr.io/nvidia/deepstream-l4t:$DEEPSTREAM_BASE_IMAGE AS base_arm64


# Savant base container
FROM base_${TARGETARCH} AS base
ARG TARGETARCH
ARG DEEPSTREAM_VERSION

# remove nvidia repos (sometimes break down)
#RUN rm -r /etc/apt/sources.list.d/* && apt-get clean

# install base packages
RUN /opt/nvidia/deepstream/deepstream/user_additional_install.sh
RUN apt-get update && \
    apt-get install --no-install-recommends -y \
      libmagic1 \
      libcairo2-dev \
      python3-pip \
      python3-dev \
      python-gi-dev \
      python3-gst-1.0 \
      gstreamer1.0-python3-plugin-loader && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ARG PROJECT_PATH=/opt/savant
ENV PYTHONUNBUFFERED=1 \
    PROJECT_PATH=$PROJECT_PATH \
    PYTHONPATH=$PROJECT_PATH \
    NUMBA_CACHE_DIR=/cache/numba \
    CUPY_CACHE_DIR=/cache/cupy
WORKDIR $PROJECT_PATH

# add deepstream libs to path, so that ctypes can load them
ENV LD_LIBRARY_PATH=/opt/nvidia/deepstream/deepstream/lib:$LD_LIBRARY_PATH

# python to python3 by default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10

# install requirements
RUN python -m pip install --no-cache-dir --upgrade pip

ARG OPENCV_VERSION=4.8.0
RUN wget -qO- \
    "https://eu-central-1.linodeobjects.com/savant-data/opencv-packages/opencv-${OPENCV_VERSION}-${TARGETARCH}-ds${DEEPSTREAM_VERSION}.tar.gz" \
    | tar xz && \
    dpkg -i OpenCV* && \
    rm OpenCV*

COPY requirements/base.txt requirements/base.txt
RUN python -m pip install --no-cache-dir -r requirements/base.txt

COPY requirements/ext.txt requirements/ext.txt
RUN python -m pip install --no-cache-dir -r requirements/ext.txt

COPY --from=savantboost_build /libs/savanboost/dist /libs/savanboost/dist
RUN python -m pip install --no-cache-dir /libs/savanboost/dist/*.whl

COPY requirements/savant-rs.txt requirements/savant-rs.txt
RUN python -m pip install --no-cache-dir -r requirements/savant-rs.txt

RUN rm -r requirements

COPY --from=pygstsavantframemeta_build /libs/gstsavantframemeta/dist /libs/gstsavantframemeta/dist
RUN python -m pip install --no-cache-dir /libs/gstsavantframemeta/dist/*.whl

COPY --from=savant_build /tmp/build/dist /libs/savant/dist
RUN python -m pip install --no-cache-dir /libs/savant/dist/*.whl

# TODO: install yq?
#ARG YQ_VERSION=4.35.2
#ARG YQ_BINARY=yq_linux_${TARGETARCH}
#RUN wget https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/${YQ_BINARY}.tar.gz -O - \
#    | tar xz && \
#    mv ${YQ_BINARY} /usr/bin/yq

# add framework content
COPY LICENSE .
COPY savant/VERSION .
COPY gst_plugins gst_plugins

COPY adapters/gst/gst_plugins adapters/gst/gst_plugins
RUN rm -f adapters/gst/gst_plugins/python/video_files_sink.py
COPY adapters/gst/sources adapters/gst/sources

COPY scripts/uri-input.py scripts/
ENV PATH=$PROJECT_PATH/scripts:$PATH \
    GST_PLUGIN_PATH=$PROJECT_PATH/gst_plugins:$PROJECT_PATH/adapters/gst/gst_plugins \
    LOGLEVEL=info

# Needed a script for healthcheck, because HEALTHCHECK command does not accept ENV
COPY healthcheck.sh .
ENV SAVANT_STATUS_FILEPATH=$PROJECT_PATH/status.txt
HEALTHCHECK --interval=5s --timeout=5s --start-period=30m --retries=3 \
    CMD [ "sh", "/opt/savant/healthcheck.sh" ]

ENTRYPOINT ["python", "-m", "savant.entrypoint"]


# Savant DeepStream adapter container
FROM base AS adapters
ARG TARGETARCH

#TODO: ARG MEDIAMTX_VERSION="v1.5.1"
ARG MEDIAMTX_VERSION="v0.22.1"
RUN mkdir mediamtx && \
    if [ "$TARGETARCH" = "amd64" ]; then \
      wget -qO- "https://github.com/bluenviron/mediamtx/releases/download/${MEDIAMTX_VERSION}/mediamtx_${MEDIAMTX_VERSION}_linux_amd64.tar.gz" | tar xz -C mediamtx; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
      wget -qO- "https://github.com/bluenviron/mediamtx/releases/download/${MEDIAMTX_VERSION}/mediamtx_${MEDIAMTX_VERSION}_linux_armv7.tar.gz" | tar xz -C mediamtx; \
    fi

HEALTHCHECK NONE

COPY adapters/shared adapters/shared
COPY adapters/ds adapters/ds
# To avoid ImportError when Nvidia runtime is not available
RUN rm gst_plugins/python/frame_tag_filter.py
ENV GST_PLUGIN_PATH=$GST_PLUGIN_PATH:$PROJECT_PATH/adapters/ds/gst_plugins

ENTRYPOINT []


# Savant documentation builder
FROM base AS docs

HEALTHCHECK NONE

RUN apt-get update && \
    apt-get install --no-install-recommends -y \
      graphviz && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

COPY samples samples

COPY docs/requirements.txt requirements.txt
RUN python -m pip install --no-cache-dir -r requirements.txt && \
    rm requirements.txt

ARG USERNAME=container_user
# UID should be set to the same value as host OS UID
ARG USER_UID=1001
ARG USER_GID=$USER_UID
# Create the user
RUN groupadd --gid $USER_GID $USERNAME && \
	useradd --uid $USER_UID --gid $USER_GID -m $USERNAME

RUN chown -R $USER_UID:$USER_GID $PROJECT_PATH
USER $USERNAME

WORKDIR $PROJECT_PATH/docs

ENTRYPOINT ["make"]
CMD ["clean", "html"]


# Savant test image, x86 only
FROM base AS tests
COPY requirements/dev.txt requirements/dev.txt
COPY tests /opt/savant/tests

RUN python -m pip install --no-cache-dir -r requirements/dev.txt
RUN python -m pip install --no-cache-dir torch torchvision torchaudio

ENTRYPOINT ["pytest", "-s", "/opt/savant/tests"]
