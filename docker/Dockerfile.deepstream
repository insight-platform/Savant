ARG DEEPSTREAM_VERSION
ARG DEEPSTREAM_DEVEL_IMAGE=$DEEPSTREAM_VERSION-triton-multiarch
ARG DEEPSTREAM_BASE_IMAGE=$DEEPSTREAM_VERSION-samples-multiarch
FROM nvcr.io/nvidia/deepstream:$DEEPSTREAM_DEVEL_IMAGE AS builder
ARG TARGETARCH

# install/upgrade pip and builders
RUN python3 -m pip install --no-cache-dir --upgrade \
    build \
    ninja \
    pip \
    scikit-build \
    setuptools \
    wheel

# install cmake
ARG CMAKE_VER=3.27.7
RUN if [ "$TARGETARCH" = "amd64" ]; then \
      wget -nv -O /tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v$CMAKE_VER/cmake-$CMAKE_VER-linux-x86_64.sh; \
      sh /tmp/cmake.sh --skip-license --prefix=/usr/local; \
      rm -f /tmp/cmake.sh; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
      wget -nv -O /tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v$CMAKE_VER/cmake-$CMAKE_VER-linux-aarch64.sh; \
      sh /tmp/cmake.sh --skip-license --prefix=/usr/local; \
      rm -f /tmp/cmake.sh; \
    fi


# extra packages builders
FROM builder AS extra-builder
FROM dustynv/l4t-pytorch:r36.2.0 AS extra-l4t-builder


# Savant python package builder
FROM builder as savant-package-builder

RUN apt-get update && \
    apt-get install --no-install-recommends -y python3-venv

WORKDIR /tmp/build
COPY pyproject.toml README.md LICENSE ./
COPY requirements/base.txt requirements/base.txt
COPY savant savant
RUN python3 -m build --wheel


# Savant GStreamer/DeepStream meta package builder
FROM builder AS savant-meta-builder

WORKDIR /libs/gstsavantframemeta
COPY libs/gstsavantframemeta/requirements.txt .
RUN python3 -m pip install --no-cache-dir -r requirements.txt

# install savant-rs
ARG SAVANT_RS_VERSION
ARG SAVANT_RS_GH_REPO=insight-platform/savant-rs
ARG SAVANT_RS_GH_TOKEN
COPY utils/install_savant_rs.py utils/install_savant_rs.py
RUN ./utils/install_savant_rs.py $SAVANT_RS_VERSION ./utils && \
    rm -rf ./utils

COPY libs/gstsavantframemeta .
RUN python3 -m build --wheel --no-isolation && rm -rf _skbuild


# Savant boost(cuda) library builder
FROM builder AS savant-boost-builder
# TODO: Determine JetPack release (replace `r36.2`)
RUN if [ "$TARGETARCH" = "arm64" ]; then \
      echo "deb [trusted=yes] https://repo.download.nvidia.com/jetson/t234 r36.2 main" \
        > /etc/apt/sources.list.d/nvidia-l4t-apt-source.list; \
      rm /etc/ld.so.conf.d/nvidia-tegra.conf; \
      mkdir -p /opt/nvidia/l4t-packages/; \
      touch /opt/nvidia/l4t-packages/.nv-l4t-disable-boot-fw-update-in-preinstall; \
      apt-get update; \
      apt-get install --no-install-recommends -y nvidia-l4t-multimedia; \
    fi

WORKDIR /libs/savanboost
COPY libs/savantboost/requirements.txt .
RUN python3 -m pip install --no-cache-dir -r requirements.txt

COPY libs/savantboost .
RUN python3 -m build --wheel --no-isolation && rm -rf _skbuild


# Savant base container
FROM nvcr.io/nvidia/deepstream:$DEEPSTREAM_BASE_IMAGE AS base
ARG TARGETARCH
ARG TARGETPLATFORM
ARG DEEPSTREAM_VERSION
ARG PACKAGES_URL=https://eu-central-1.linodeobjects.com/savant-data/packages/${TARGETPLATFORM}/ds${DEEPSTREAM_VERSION}

# install base packages
RUN /opt/nvidia/deepstream/deepstream/user_additional_install.sh
RUN apt-get update && \
    apt-get install --no-install-recommends -y \
      file \
      gdb \
      strace \
      libmagic1 \
      libcairo2-dev \
      python3-pip \
      python3-dev \
      python-gi-dev \
      python3-gst-1.0 \
      gstreamer1.0-python3-plugin-loader && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# ao-rtsp bug fix
RUN if [ "$TARGETARCH" = "amd64" ]; then \
      rm /usr/lib/x86_64-linux-gnu/gio/modules/libgiolibproxy.so; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
      rm /usr/lib/aarch64-linux-gnu/gio/modules/libgiolibproxy.so; \
    fi

ARG PROJECT_PATH=/opt/savant
ENV PYTHONUNBUFFERED=1 \
    PROJECT_PATH=$PROJECT_PATH \
    PYTHONPATH=$PROJECT_PATH \
    NUMBA_CACHE_DIR=/cache/numba \
    CUPY_CACHE_DIR=/cache/cupy
WORKDIR $PROJECT_PATH

# add deepstream libs to path, so that ctypes can load them
ENV LD_LIBRARY_PATH=/opt/nvidia/deepstream/deepstream/lib:$LD_LIBRARY_PATH

# python to python3 by default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10

# install requirements
RUN python -m pip install --no-cache-dir --upgrade pip

ARG OPENCV_VERSION=4.8.0
RUN wget -qO- \
    ${PACKAGES_URL}/opencv-${OPENCV_VERSION}-${TARGETARCH}-ds${DEEPSTREAM_VERSION}.tar.gz \
    | tar xz && \
    dpkg -i OpenCV* && \
    rm OpenCV*

COPY requirements/base.txt requirements.txt
RUN python -m pip install --no-cache-dir -r requirements.txt && rm requirements.txt

COPY --from=savant-boost-builder /libs/savanboost/dist /libs/savanboost/dist
RUN python -m pip install --no-cache-dir /libs/savanboost/dist/*.whl

COPY --from=savant-meta-builder /libs/gstsavantframemeta/dist /libs/gstsavantframemeta/dist
RUN python -m pip install --no-cache-dir /libs/gstsavantframemeta/dist/*.whl

COPY --from=savant-package-builder /tmp/build/dist /libs/savant/dist
RUN python -m pip install --no-cache-dir /libs/savant/dist/*.whl

# install savant-rs
ARG SAVANT_RS_VERSION
ARG SAVANT_RS_GH_REPO=insight-platform/savant-rs
ARG SAVANT_RS_GH_TOKEN
COPY utils/install_savant_rs.py utils/install_savant_rs.py
RUN ./utils/install_savant_rs.py $SAVANT_RS_VERSION ./utils && \
    rm -rf ./utils

# TODO: install yq?
#ARG YQ_VERSION=4.35.2
#ARG YQ_BINARY=yq_linux_${TARGETARCH}
#RUN wget https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/${YQ_BINARY}.tar.gz -O - \
#    | tar xz && \
#    mv ${YQ_BINARY} /usr/bin/yq

# add framework content
COPY LICENSE .
COPY savant/VERSION .
COPY gst_plugins gst_plugins

COPY adapters/gst/gst_plugins adapters/gst/gst_plugins
RUN rm -f \
    adapters/gst/gst_plugins/python/video_files_sink.py \
    adapters/gst/gst_plugins/python/zeromq_sink.py
COPY adapters/gst/sources adapters/gst/sources

COPY scripts/uri-input.py scripts/
ENV PATH=$PROJECT_PATH/scripts:$PATH \
    GST_PLUGIN_PATH=$PROJECT_PATH/gst_plugins:$PROJECT_PATH/adapters/gst/gst_plugins \
    LOGLEVEL=info

# Needed a script for healthcheck, because HEALTHCHECK command does not accept ENV
COPY healthcheck.sh .
ENV SAVANT_STATUS_FILEPATH=$PROJECT_PATH/status.txt
HEALTHCHECK --interval=5s --timeout=5s --start-period=30m --retries=3 \
    CMD [ "sh", "/opt/savant/healthcheck.sh" ]

RUN echo 'python3 -c "from savant.utils.welcome import get_welcome_message; print(get_welcome_message())"' >> /etc/bash.bashrc

ENTRYPOINT ["python", "-m", "savant.entrypoint"]


# Savant DeepStream adapter container
FROM base AS adapters
ARG TARGETARCH

ARG MEDIAMTX_VERSION="v1.5.1"
RUN mkdir mediamtx && \
    if [ "$TARGETARCH" = "amd64" ]; then \
      wget -qO- "https://github.com/bluenviron/mediamtx/releases/download/${MEDIAMTX_VERSION}/mediamtx_${MEDIAMTX_VERSION}_linux_amd64.tar.gz" | tar xz -C mediamtx; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
      wget -qO- "https://github.com/bluenviron/mediamtx/releases/download/${MEDIAMTX_VERSION}/mediamtx_${MEDIAMTX_VERSION}_linux_armv7.tar.gz" | tar xz -C mediamtx; \
    fi

COPY adapters/requirements-ds.txt adapters/requirements-ds.txt
RUN python -m pip install --no-cache-dir -r adapters/requirements-ds.txt

HEALTHCHECK NONE

COPY adapters/shared adapters/shared
COPY adapters/ds adapters/ds
# To avoid ImportError when Nvidia runtime is not available
RUN rm gst_plugins/python/frame_tag_filter.py
ENV GST_PLUGIN_PATH=$GST_PLUGIN_PATH:$PROJECT_PATH/adapters/ds/gst_plugins

ENTRYPOINT []


# Savant documentation builder
FROM base AS docs

HEALTHCHECK NONE

RUN apt-get update && \
    apt-get install --no-install-recommends -y \
      graphviz && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

COPY samples samples

COPY docs/requirements.txt requirements.txt
RUN python -m pip install --no-cache-dir -r requirements.txt && \
    rm requirements.txt

ARG USERNAME=container_user
# UID should be set to the same value as host OS UID
ARG USER_UID=1001
ARG USER_GID=$USER_UID
# Create the user
RUN groupadd --gid $USER_GID $USERNAME && \
	useradd --uid $USER_UID --gid $USER_GID -m $USERNAME

RUN chown -R $USER_UID:$USER_GID $PROJECT_PATH
USER $USERNAME

WORKDIR $PROJECT_PATH/docs

ENTRYPOINT ["make"]
CMD ["clean", "html"]


# Extra x86 container
FROM base AS deepstream-extra
ARG TARGETARCH
ARG TARGETPLATFORM
ARG DEEPSTREAM_VERSION
ARG PACKAGES_URL=https://eu-central-1.linodeobjects.com/savant-data/packages/${TARGETPLATFORM}/ds${DEEPSTREAM_VERSION}

# torch, torchvision, torchaudio
RUN python -m pip install --no-cache-dir torch torchvision torchaudio

ENV TORCH_HOME=/cache/models/torch_hub

# torch2trt
ARG TORCH2TRT_VERSION=0.4.0
ARG TORCH2TRT_WHL="torch2trt-${TORCH2TRT_VERSION}-py3-none-any.whl"
RUN wget -nv -P /usr/local/lib/ ${PACKAGES_URL}/libtorch2trt_plugins.so && \
    ldconfig && \
    wget -nv -O ${TORCH2TRT_WHL} ${PACKAGES_URL}/${TORCH2TRT_WHL} && \
    python -m pip install --no-cache-dir tensorrt && \
    python -m pip install --no-cache-dir ${TORCH2TRT_WHL} && \
    python -m pip install --no-cache-dir nvidia-pyindex && \
    python -m pip install --no-cache-dir onnx-graphsurgeon && \
    rm ${TORCH2TRT_WHL}

# pycuda
ARG PYCUDA_VERSION=2024.1
ARG PYCUDA_WHL="pycuda-${PYCUDA_VERSION}-cp310-cp310-linux_x86_64.whl"
RUN wget -nv -O ${PYCUDA_WHL} ${PACKAGES_URL}/${PYCUDA_WHL} && \
    python -m pip install --no-cache-dir ${PYCUDA_WHL} && \
    rm ${PYCUDA_WHL}

# onnx, onnxruntime (use extra-index to get the version with CUDA 12.2 support)
ARG ORT_VERSION=1.17.1
RUN python -m pip install --no-cache-dir onnx onnxruntime-gpu --extra-index-url https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/onnxruntime-cuda-12/pypi/simple/

# cython, polars, scikit-learn, jupyter, etc.
COPY requirements/extra.txt requirements.txt
RUN python -m pip install --no-cache-dir -r requirements.txt && rm requirements.txt


# Extra l4t container
# based on https://github.com/dusty-nv/jetson-containers
FROM base AS deepstream-l4t-extra

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
            libopenblas-dev \
            libopenmpi-dev \
            openmpi-bin \
            openmpi-common \
            libomp-dev \
            libjpeg-dev \
            zlib1g-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# torch, torchvision, torchaudio
COPY --from=dustynv/l4t-pytorch:r36.2.0 /usr/local/cuda-12.2/targets/aarch64-linux/lib/libcupti.* /usr/local/cuda-12.2/targets/aarch64-linux/lib/
COPY --from=dustynv/l4t-pytorch:r36.2.0 /opt/torch*.whl /opt/
RUN python -m pip install --no-cache-dir /opt/torch*.whl && \
    rm /opt/torch*.whl

# set the CUDA architectures that torch extensions get built for
# Nano/TX1 = 5.3, TX2 = 6.2, Xavier = 7.2, Orin = 8.7
ARG TORCH_CUDA_ARCH_ARGS="8.7"
ENV TORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_ARGS} \
    TORCH_HOME=/cache/models/torch_hub

# torch2trt
ARG TORCH2TRT_VERSION=0.4.0
ARG TORCH2TRT_WHL="torch2trt-${TORCH2TRT_VERSION}-py3-none-any.whl"
RUN wget -nv -P /usr/local/lib/ ${PACKAGES_URL}/libtorch2trt_plugins.so && \
    ldconfig && \
    wget -nv -O ${TORCH2TRT_WHL} ${PACKAGES_URL}/${TORCH2TRT_WHL} && \
    python -m pip install --no-cache-dir tensorrt && \
    python -m pip install --no-cache-dir ${TORCH2TRT_WHL} && \
    python -m pip install --no-cache-dir nvidia-pyindex && \
    python -m pip install --no-cache-dir onnx-graphsurgeon && \
    rm ${TORCH2TRT_WHL}

# pycuda
ARG PYCUDA_VERSION=2024.1
ARG PYCUDA_WHL="pycuda-${PYCUDA_VERSION}-cp310-cp310-linux_aarch64.whl"
RUN wget -nv -O ${PYCUDA_WHL} ${PACKAGES_URL}/${PYCUDA_WHL} && \
    python -m pip install --no-cache-dir ${PYCUDA_WHL} && \
    rm ${PYCUDA_WHL}

# onnx, onnxruntime
# https://elinux.org/Jetson_Zoo#ONNX_Runtime
ARG ORT_URL="https://nvidia.box.com/shared/static/i7n40ki3pl2x57vyn4u7e9asyiqlnl7n.whl"
ARG ORT_WHL="onnxruntime_gpu-1.17.0-cp310-cp310-linux_aarch64.whl"
RUN wget -nv -O ${ORT_WHL} ${ORT_URL} && \
    python -m pip install --no-cache-dir onnx ${ORT_WHL}

# cython, polars, scikit-learn, jupyter, etc.
COPY requirements/extra.txt requirements.txt
RUN python -m pip install --no-cache-dir -r requirements.txt && rm requirements.txt
