ARG DEEPSTREAM_VERSION
ARG DEEPSTREAM_DEVEL_IMAGE=$DEEPSTREAM_VERSION-triton-multiarch
ARG DEEPSTREAM_BASE_IMAGE=$DEEPSTREAM_VERSION-samples
FROM nvcr.io/nvidia/deepstream:$DEEPSTREAM_DEVEL_IMAGE AS base_builder
ARG TARGETARCH

# python to python3 by default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10

# update pip
RUN python -m pip install --no-cache-dir --upgrade pip


# Savant python package builder
FROM base_builder as savant_build

RUN apt-get install --no-install-recommends -y python3.8-venv

RUN python3 -m pip install setuptools wheel build

WORKDIR /tmp/build
COPY pyproject.toml README.md LICENSE ./
COPY requirements/base.txt requirements/base.txt
COPY requirements/savant-rs.txt requirements/savant-rs.txt
COPY savant savant
RUN python3 -m build --wheel


# Savant GStreamer/DeepStream meta package builder
FROM base_builder AS pygstsavantframemeta_build

WORKDIR /libs/gstsavantframemeta
COPY libs/gstsavantframemeta/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY requirements/savant-rs.txt requirements-savant-rs.txt
RUN pip install --no-cache-dir -r requirements-savant-rs.txt

COPY libs/gstsavantframemeta .
RUN python setup.py bdist_wheel && rm -rf _skbuild


# Savant boost(cuda) library builder
# TODO: Check Jetson requirements (Xavier t194, Orin t234)
FROM base_builder AS savantboost_build

ARG CMAKE_VER=3.27.7
RUN if [ "$TARGETARCH" = "amd64" ]; then \
      wget -nv -O /tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v$CMAKE_VER/cmake-$CMAKE_VER-linux-x86_64.sh; \
      sh /tmp/cmake.sh --skip-license --prefix=/usr/local; \
      rm -f /tmp/cmake.sh; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
      wget -nv -O /tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v$CMAKE_VER/cmake-$CMAKE_VER-linux-aarch64.sh; \
      sh /tmp/cmake.sh --skip-license --prefix=/usr/local; \
      rm -f /tmp/cmake.sh; \
      echo "deb https://repo.download.nvidia.com/jetson/t194 `cat /etc/apt/sources.list | grep jetson/common | cut -d' ' -f3` main" \
        > /etc/apt/sources.list.d/nvidia-l4t-apt-source.list; \
      rm /etc/ld.so.conf.d/nvidia-tegra.conf; \
      mkdir -p /opt/nvidia/l4t-packages/; \
      touch /opt/nvidia/l4t-packages/.nv-l4t-disable-boot-fw-update-in-preinstall; \
      apt-get update; \
      apt-get install -y nvidia-l4t-multimedia; \
    fi

WORKDIR /libs/savanboost
COPY libs/savantboost/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY libs/savantboost .
RUN python setup.py bdist_wheel -- -DCMAKE_BUILD_TYPE:STRING=Release  && rm -rf _skbuild

# Savant amd64 base container
FROM nvcr.io/nvidia/deepstream:$DEEPSTREAM_BASE_IMAGE AS base_amd64


# Savant arm64 base container
FROM nvcr.io/nvidia/deepstream-l4t:$DEEPSTREAM_BASE_IMAGE AS base_arm64


# Savant base container
FROM base_${TARGETARCH} AS base
ARG TARGETARCH
ARG DEEPSTREAM_VERSION

# remove nvidia repos (sometimes break down)
#RUN rm -r /etc/apt/sources.list.d/* && apt-get clean

# install base packages
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
        python3-pip \
        python3-dev \
        libcairo2-dev \
        libgirepository1.0-dev \
        python3-gst-1.0 \
        gstreamer1.0-python3-plugin-loader \
    && apt-get install --reinstall -y \
        gstreamer1.0-plugins-ugly \
        libavutil56 \
        libavformat58 \
        libavfilter7 \
        libavdevice58 \
        libavcodec58 \
        libvpx6 \
        libx265-179 \
        libmpg123-0 \
        libx264-155 \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ARG PROJECT_PATH=/opt/savant
ENV PYTHONUNBUFFERED=1 \
    PROJECT_PATH=$PROJECT_PATH \
    PYTHONPATH=$PROJECT_PATH
WORKDIR $PROJECT_PATH

# add deepstream libs to path, so that ctypes can load them
ENV LD_LIBRARY_PATH=/opt/nvidia/deepstream/deepstream/lib:$LD_LIBRARY_PATH

# python to python3 by default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10

# install requirements
RUN python -m pip install --no-cache-dir --upgrade pip

ARG OPENCV_VERSION=4.8.0
RUN wget -qO- \
    "https://eu-central-1.linodeobjects.com/savant-data/opencv-packages/opencv-${OPENCV_VERSION}-${TARGETARCH}-ds${DEEPSTREAM_VERSION}.tar.gz" \
    | tar xz \
    && dpkg -i OpenCV* \
    && rm OpenCV*

COPY requirements/base.txt requirements/base.txt
RUN python -m pip install --no-cache-dir -r requirements/base.txt

COPY requirements/ext.txt requirements/ext.txt
RUN python -m pip install --no-cache-dir -r requirements/ext.txt

COPY --from=savantboost_build /libs/savanboost/dist /libs/savanboost/dist
RUN python -m pip install --no-cache-dir /libs/savanboost/dist/*.whl

COPY requirements/savant-rs.txt requirements/savant-rs.txt
RUN python -m pip install --no-cache-dir -r requirements/savant-rs.txt

RUN rm -r requirements

COPY --from=pygstsavantframemeta_build /libs/gstsavantframemeta/dist /libs/gstsavantframemeta/dist
RUN python -m pip install --no-cache-dir /libs/gstsavantframemeta/dist/*.whl

COPY --from=savant_build /tmp/build/dist /libs/savant/dist
RUN python -m pip install --no-cache-dir /libs/savant/dist/*.whl

# add framework content
COPY LICENSE .
COPY savant/VERSION .
COPY gst_plugins gst_plugins

COPY adapters/gst/gst_plugins adapters/gst/gst_plugins
RUN rm -f adapters/gst/gst_plugins/python/video_files_sink.py
COPY adapters/gst/sources adapters/gst/sources

COPY scripts/uri-input.py scripts/
ENV PATH=$PROJECT_PATH/scripts:$PATH \
    GST_PLUGIN_PATH=$PROJECT_PATH/gst_plugins:$PROJECT_PATH/adapters/gst/gst_plugins \
    LOGLEVEL=info

# Needed a script for healthcheck, because HEALTHCHECK command does not accept ENV
COPY healthcheck.sh ./
ENV SAVANT_STATUS_FILEPATH=$PROJECT_PATH/status.txt
HEALTHCHECK --interval=5s --timeout=5s --start-period=30m --retries=3 \
    CMD [ "sh", "healthcheck.sh" ]

ENTRYPOINT ["python", "-m", "savant.entrypoint"]


# Savant DeepStream adapter mediamtx builder
FROM nvcr.io/nvidia/deepstream:$DEEPSTREAM_DEVEL_IMAGE AS mediamtx
ARG TARGETARCH

ARG MEDIAMTX_VERSION="v0.22.1"
WORKDIR /mediamtx
RUN if [ "$TARGETARCH" = "amd64" ]; then \
      wget -qO- "https://github.com/aler9/mediamtx/releases/download/${MEDIAMTX_VERSION}/mediamtx_${MEDIAMTX_VERSION}_linux_amd64.tar.gz" | tar xz; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
      wget -qO- "https://github.com/aler9/mediamtx/releases/download/${MEDIAMTX_VERSION}/mediamtx_${MEDIAMTX_VERSION}_linux_armv7.tar.gz" | tar xz; \
    fi


# Savant DeepStream adapter main container
FROM base AS adapters

HEALTHCHECK NONE

COPY --from=mediamtx /mediamtx/mediamtx mediamtx/mediamtx
COPY adapters/ds adapters/ds
ENV GST_PLUGIN_PATH=$GST_PLUGIN_PATH:$PROJECT_PATH/adapters/ds/gst_plugins

ENTRYPOINT []


# Savant documentation builder
FROM base AS docs

HEALTHCHECK NONE

RUN apt update && apt install --no-install-recommends -y \
    graphviz && \
    apt autoremove -y && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*

COPY samples samples

COPY docs/requirements.txt requirements.txt
RUN python -m pip install --no-cache-dir -r requirements.txt \
    && rm requirements.txt

ARG USERNAME=container_user
# UID should be set to the same value as host OS UID
ARG USER_UID=1001
ARG USER_GID=$USER_UID
# Create the user
RUN groupadd --gid $USER_GID $USERNAME \
	&& useradd --uid $USER_UID --gid $USER_GID -m $USERNAME

RUN chown -R $USER_UID:$USER_GID $PROJECT_PATH
USER $USERNAME

WORKDIR $PROJECT_PATH/docs

ENTRYPOINT ["make"]
CMD ["clean", "html"]
