FROM ubuntu:22.04 AS base

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update && \
    apt-get install --no-install-recommends -y \
        file \
        gstreamer1.0-plugins-bad \
        gstreamer1.0-plugins-base \
        gstreamer1.0-plugins-good \
        gstreamer1.0-python3-plugin-loader \
        gstreamer1.0-tools \
        python3-pip && \
    rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10


FROM base AS base-builder

RUN apt-get update \
    && apt-get install -y \
        build-essential \
        cmake \
        git \
        m4 \
        ninja-build \
        pkg-config \
        python3-dev \
        python3-pip \
        wget \
    && rm -rf /var/lib/apt/lists/*

# install/upgrade pip and builders
RUN python3 -m pip install --no-cache-dir --upgrade \
    build \
    ninja \
    pip \
    scikit-build \
    setuptools \
    wheel

# install cmake
ARG TARGETARCH
ARG CMAKE_VER=3.27.7
RUN if [ "$TARGETARCH" = "amd64" ]; then \
      wget -nv -O /tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v$CMAKE_VER/cmake-$CMAKE_VER-linux-x86_64.sh \
      && sh /tmp/cmake.sh --skip-license --prefix=/usr/local \
      && rm -f /tmp/cmake.sh; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
      wget -nv -O /tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v$CMAKE_VER/cmake-$CMAKE_VER-linux-aarch64.sh \
      && sh /tmp/cmake.sh --skip-license --prefix=/usr/local \
      && rm -f /tmp/cmake.sh; \
    fi


FROM base-builder AS aravis-builder

RUN apt-get update \
    && apt-get install -y \
        gettext \
        gobject-introspection \
        gtk-doc-tools \
        libgirepository1.0-dev \
        libglib2.0-dev \
        libgstreamer-plugins-base1.0-dev \
        libgstreamer-plugins-good1.0-dev \
        libgstreamer1.0-dev \
        libgtk-3-dev \
        libusb-1.0-0-dev \
        libxml2-dev \
        xsltproc \
    && rm -rf /var/lib/apt/lists/*

RUN python -m pip install --no-cache-dir meson==0.63.3

ARG ARAVIS_VERSION=0.8.27
RUN git clone --depth 1 --branch ${ARAVIS_VERSION} https://github.com/AravisProject/aravis.git /build/aravis

WORKDIR /build/aravis
RUN meson build \
        --prefix /build/aravis/dist \
        -Dgst-plugin=enabled \
        -Dviewer=disabled  \
        -Dpacket-socket=disabled  \
        -Dtests=false \
    && cd build \
    && ninja \
    && ninja install \
    && cd .. \
    && rm -rf build


FROM base-builder AS kvs-sdk-builder

RUN apt-get update \
    && apt-get install -y \
        libcurl4-openssl-dev \
        liblog4cplus-dev \
        libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Build KVS SDK
ARG KVS_SDK_VERSION=v3.4.1
RUN git clone --depth 1 --branch ${KVS_SDK_VERSION} https://github.com/awslabs/amazon-kinesis-video-streams-producer-sdk-cpp.git /opt/amazon-kvs-sdk
WORKDIR /opt/amazon-kvs-sdk/build
RUN cmake \
        -DBUILD_GSTREAMER_PLUGIN=OFF \
        -DBUILD_DEPENDENCIES=OFF \
        -DBUILD_JNI=OFF \
        -DCMAKE_INSTALL_PREFIX=../dist \
        .. \
    && make \
    && make install \
    && find dependency -name "*.so" -exec cp {} ../dist/lib/ \;

# Build bindings for KVS SDK
WORKDIR /opt/pykvssdk
COPY libs/pykvssdk/requirements.txt ./
RUN python3 -m pip install --no-cache-dir -r requirements.txt
COPY libs/pykvssdk /opt/pykvssdk
RUN python3 setup.py bdist_wheel -- \
      -DBUILD_TYPE=Release \
      -DKVS_SDK_BASE_DIR=/opt/amazon-kvs-sdk \
    && rm -rf _skbuild *.egg-info


FROM base-builder AS kvs-consumer-builder

RUN git clone \
        https://github.com/aws-samples/amazon-kinesis-video-streams-consumer-library-for-python.git \
        /opt/amazon-kinesis-video-streams-consumer-library-for-python \
    && cd /opt/amazon-kinesis-video-streams-consumer-library-for-python \
    && git checkout c97c13029163fe83b6904b5a594d6d7f697bdcb8 \
    && rm -rf .git


FROM base-builder AS savant-meta-builder

RUN apt-get update \
    && apt-get install -y \
        libglib2.0-dev \
        libgstreamer1.0-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /libs/gstsavantframemeta
COPY libs/gstsavantframemeta/requirements.txt .
RUN python3 -m pip install --no-cache-dir -r requirements.txt

# install savant-rs
ARG SAVANT_RS_VERSION
ARG SAVANT_RS_GH_REPO=insight-platform/savant-rs
ARG SAVANT_RS_GH_TOKEN
COPY utils/install_savant_rs.py utils/install_savant_rs.py
RUN ./utils/install_savant_rs.py $SAVANT_RS_VERSION ./utils && \
    rm -rf ./utils

COPY libs/gstsavantframemeta .
RUN python3 -m build --wheel --no-isolation && rm -rf _skbuild


FROM base

ARG PROJECT_PATH=/opt/savant
ENV PYTHONUNBUFFERED=1 \
    PROJECT_PATH=$PROJECT_PATH \
    PYTHONPATH=$PROJECT_PATH
WORKDIR $PROJECT_PATH

RUN apt-get update && \
    apt-get install --no-install-recommends -y \
      gdb \
      libcurl4 \
      libice6 \
      liblog4cplus-2.0.5 \
      libsm6 \
      strace \
    && rm -rf /var/lib/apt/lists/*

COPY adapters/requirements.txt adapters/requirements-gst.txt adapters/
RUN python -m pip install --no-cache-dir \
    -r adapters/requirements.txt \
    -r adapters/requirements-gst.txt
RUN if [ "$(arch)" = "aarch64" ]; then \
        rm /usr/lib/aarch64-linux-gnu/gio/modules/libgiolibproxy.so; \
    else \
        rm /usr/lib/x86_64-linux-gnu/gio/modules/libgiolibproxy.so; \
    fi

COPY --from=aravis-builder /build/aravis/dist /usr

COPY --from=kvs-sdk-builder /opt/amazon-kvs-sdk/dist/lib /opt/amazon-kvs-sdk/lib
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/amazon-kvs-sdk/lib"

COPY --from=kvs-sdk-builder /opt/pykvssdk/dist /opt/pykvssdk/dist
RUN python -m pip install --no-cache-dir /opt/pykvssdk/dist/*.whl

COPY --from=kvs-consumer-builder /opt/amazon-kinesis-video-streams-consumer-library-for-python /opt/amazon-kinesis-video-streams-consumer-library-for-python
RUN python -m pip install --no-cache-dir -r /opt/amazon-kinesis-video-streams-consumer-library-for-python/requirements.txt
ENV PYTHONPATH="${PYTHONPATH}:/opt/amazon-kinesis-video-streams-consumer-library-for-python"

COPY --from=savant-meta-builder /libs/gstsavantframemeta/dist /libs/gstsavantframemeta/dist
RUN python -m pip install --no-cache-dir /libs/gstsavantframemeta/dist/*.whl

# install savant-rs
ARG SAVANT_RS_VERSION
ARG SAVANT_RS_GH_REPO=insight-platform/savant-rs
ARG SAVANT_RS_GH_TOKEN
COPY utils/install_savant_rs.py utils/install_savant_rs.py
RUN ./utils/install_savant_rs.py $SAVANT_RS_VERSION ./utils && \
    rm -rf ./utils

# copy savant and plugins - they are used in imports
COPY savant savant
COPY gst_plugins gst_plugins

# copy necessary gst plugins and set plugin path correctly
COPY adapters/shared adapters/shared
COPY adapters/python adapters/python
COPY adapters/gst adapters/gst
COPY gst_plugins/python/logger.py adapters/gst/gst_plugins/python/
ENV GST_PLUGIN_PATH=$PROJECT_PATH/adapters/gst/gst_plugins \
    LOGLEVEL=info

RUN echo 'python3 -c "from savant.utils.welcome import get_welcome_message; print(get_welcome_message())"' >> /etc/bash.bashrc
