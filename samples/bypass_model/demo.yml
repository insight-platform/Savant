# module name, required
name: bypass_demo

# base module parameters
parameters:
  # pipeline processing frame parameters
  frame:
    width: 640
    height: 360
  batch_size: 1
  # model name
  model_name: identity
  # needs to retrieve the model output in pyfunc element using object meta attributes
  element_name: model
  attribute_name: frame
  # pre-processed frame shape
  result_shape: [3, 720, 1080]

pipeline:
  # source definition is skipped, zeromq source is used by default to connect with source adapters

  # define pipeline's main elements
  elements:
    - element: nvinfer@attribute_model
      # model name in the pipeline, required
      name: ${parameters.element_name}
      # model definition
      model:
        # remote storage from which model files will be downloaded
        # delete if model files are provided locally
        remote:
          url: s3://savant-data/models/${parameters.model_name}/${parameters.model_name}.zip
          checksum_url: s3://savant-data/models/${parameters.model_name}/${parameters.model_name}.md5
          parameters:
            endpoint: https://eu-central-1.linodeobjects.com
        # format of the provided model
        format: onnx
        # model file name without location
        model_file: ${parameters.model_name}.onnx
        # configuration of input data and custom preprocessing methods
        input:
          # model input layer shape
          shape: ${parameters.result_shape}
          # preprocessing settings
          maintain_aspect_ratio: true

        # configuration of model output
        output:
          # model output layer names
          layer_names: [output]
          # specify a class to transform raw model output tensors into attributes using GPU
          converter:
            module: savant.converter.raw_output
            class_name: ModelCudaRawOutputConverter
          # name of the attribute to store model output
          attributes:
            - name: ${parameters.attribute_name}
              # must be internal, frame metadata doesn't currently support numpy arrays
              internal: true

    # display preprocessed frames next to the original frames
    - element: pyfunc
      module: samples.bypass_model.example
      class_name: DisplayFrames
      kwargs:
        # codec parameters for result stream (auxiliary stream)
        codec_params:
          codec: hevc

  # sink definition is skipped, zeromq sink is used by default to connect with sink adapters
