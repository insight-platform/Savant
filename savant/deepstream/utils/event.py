"""DeepStream event utils.
TODO: find or compile bindings for gst-nvevent.h
"""
from typing import Optional
from savant.gstreamer import Gst, GObject  # noqa:F401


def _make_nvevent_type(event_type: int):
    return (event_type << Gst.EVENT_NUM_SHIFT) | (
        Gst.EventTypeFlags.DOWNSTREAM | Gst.EventTypeFlags.SERIALIZED
    )


# TODO: find or compile bindings for gst-nvevent.h
GST_NVEVENT_PAD_ADDED = _make_nvevent_type(400)
GST_NVEVENT_PAD_DELETED = _make_nvevent_type(401)
GST_NVEVENT_STREAM_EOS = _make_nvevent_type(402)
GST_NVEVENT_STREAM_SEGMENT = _make_nvevent_type(403)
GST_NVEVENT_STREAM_RESET = _make_nvevent_type(404)
GST_NVEVENT_STREAM_START = _make_nvevent_type(405)


def _gst_nvevent_extract_source_id(event: Gst.Event, event_type, struct_name: str):
    if not (event.type == event_type and event.has_name(struct_name)):
        return None
    struct: Gst.Structure = event.get_structure()
    parsed, source_id = struct.get_uint('source-id')
    return source_id if parsed else None


# pylint:disable=line-too-long
def gst_nvevent_parse_pad_deleted(event: Gst.Event) -> Optional[int]:
    """Extract source-id from GST_NVEVENT_PAD_DELETED.

    GST_NVEVENT_PAD_DELETED generated by nvstreammux.
    See https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvstreammux.html
    for details.
    """

    return _gst_nvevent_extract_source_id(
        event, GST_NVEVENT_PAD_DELETED, 'nv-pad-deleted'
    )


# pylint:disable=line-too-long
def gst_nvevent_parse_stream_eos(event: Gst.Event) -> Optional[int]:
    """Extract source-id from GST_NVEVENT_STREAM_EOS.

    GST_NVEVENT_STREAM_EOS generated by nvstreammux.
    See https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvstreammux.html
    for details.
    """

    return _gst_nvevent_extract_source_id(
        event, GST_NVEVENT_STREAM_EOS, 'nv-stream-eos'
    )


def gst_nvevent_new_stream_eos(source_id: int) -> Gst.Event:
    """Creates a "custom EOS" event for the specified source.

    :param source_id: Source ID of the stream for which EOS is to be sent;
                      also the pad ID  of the sinkpad of the
                      Gst-nvstreammux plugin for which
                      the source is configured.
    """

    struct: Gst.Structure = Gst.Structure.new_empty('nv-stream-eos')
    struct.set_value('source-id', GObject.Value(GObject.TYPE_UINT, source_id))
    event: Gst.Event = Gst.Event.new_custom(Gst.EventType.UNKNOWN, struct)
    event.type = GST_NVEVENT_STREAM_EOS
    return event
